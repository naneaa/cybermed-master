// *****************************************************************
// This file is part of the CYBERMED Libraries
//
// Copyright (C) 2007 LabTEVE (http://www.de.ufpb.br/~labteve),
// Federal University of Paraiba and University of SÃ£o Paulo.
// All rights reserved.
//
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 2
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public
// License along with this program; if not, write to the Free
// Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
// Boston, MA 02110-1301, USA.
// *****************************************************************

#ifndef CYBSTEREO_H_
#define CYBSTEREO_H_

#ifdef CYBOPTICALTRACKER_H

#include "cybRegionTrackInfo.h"
#include <opencv/cvaux.h>
#include <iostream>
#include <fstream>

using namespace std;

/**
 * @class CybStereo
 * @file CybStereo.h 
 * @short This class is used to calculate the 3D position using stereo techniques 
 * 
 *
 *  * 
 * @author LabTEVE (http://www.de.ufpb.br/~labteve), Federal University of Paraiba
 * @version 1.0
 * @date 2008, July
 * 
 */
class CybStereo {
public:

	/** Constructor
	*
	*@param char *params_cam1
	*@param char *params_cam2
	*
	*/
	//Input files generated from CalibrationTool
	CybStereo(char *params_cam1, char *params_cam2);

	/** Constructor */
	CybStereo();

	/** Constructor
	*
	*@param double intrisic_matrix_1[3][3]
	*@param double intrisic_matrix_2[3][3]
	*@param double distortion_1[4]
	*@param double distortion_2[4]
	*
	*/
	CybStereo(double intrisic_matrix_1[3][3], double intrisic_matrix_2[3][3],
			double distortion_1[4], double distortion_2[4]);
	
    /**
  	 * This method indenfity all cams installed on system and create prepare them for use in Cybermed
  	 *
  	 * @param CybRegionTrackInfo *left_cam
  	 * @param CybRegionTrackInfo *right_cam
  	 * @param double point[3]
	 *
  	 * @return void
  	 *
  	 */
	virtual void get3Dposition(CybRegionTrackInfo *left_cam,
			CybRegionTrackInfo *right_cam, double point[3]);

	 /**
  	 * This method calibrate the cams using data generate by CybCalibration class
  	 *
  	 * @param IplImage *letf_img
  	 * @param IplImage *rigth_img
	 *
  	 * @return void
  	 *
  	 */
	virtual void calibrate_cams(IplImage *letf_img, IplImage *rigth_img);

	 /**
  	 * This method indicates if the camera calibration has been performed
  	 *
  	 * @param void
	 *
  	 * @return bool
  	 *
  	 */	
	virtual bool calibrated();

	 /**
  	 * Set calibration status to false. This force the user to call calibration routine again
  	 *
  	 * @param void
  	 * @return void
  	 *
  	 */	
	virtual void decalibrate();

	 /**
  	 * This method is used to config stereo reconstruction based on configuration parameters passed
  	 *
  	 * @param int etalon_width
  	 * @param int etalon_height
  	 * @param int square_size
	 *
  	 * @return void
  	 *
  	 */	
	virtual void stereo_config(int etalon_width, int etalon_height, int square_size);

	 /**
  	 * This method is used to pass the parameters files of each camera
  	 *
  	 * @param char *cam_left
  	 * @param char *cam_rigth
	 *
  	 * @return void
  	 *
  	 */
	virtual void camera_params(char *cam_left, char *cam_rigth);

	 /**
  	 * This method is used to pass the parameters of each camera
  	 *
  	 * @param double intrisic_matrix_1[3][3]
  	 * @param double intrisic_matrix_2[3][3]
  	 * @param double distortion_1[4]
  	 * @param double distortion_2[4]
	 *
  	 * @return void
  	 *
  	 */
	virtual void camera_params(double intrisic_matrix_1[3][3], double intrisic_matrix_2[3][3],
			double distortion_1[4], double distortion_2[4]);
	
	 /**
  	 * Set debug mode
  	 *
  	 * @param bool debug
  	 * 
  	 * @return void
  	 *
  	 */	
	virtual void setDebug(bool debug);

	 /**
  	 * Get debug mode
  	 *
  	 * @param double intrisic_matrix_1[3][3]
  	 *
  	 * @return void
  	 *
  	 */
	virtual bool getDebugStatus();

	/** Destructor */
	virtual ~CybStereo();

protected:

private:
	bool isCalibrated; /**< It indicates if the cameras has been calibrated */
	bool debug; /**< */
	Cv3dTrackerCameraIntrinsics camera_intrinsics[2]; /**< Intrisics matrix of cameras*/
	Cv3dTrackerCameraInfo camera_info[2]; /**< Info data of cameras. This values are generated by Stereo class*/
	
	int etalon_width; /**< etalon width*/
	int etalon_height; /**< etalon height*/
	int square_size; /**< Size of square*/
	
	 /**
  	 * Get parameters of cameras from files
  	 *
  	 * @param char *file_name
  	 * @param double intrisics_params[3][3]
  	 * @param double distotion[4]
  	 *
  	 * @return void
  	 *
  	 */
	void getParams(char *file_name, double intrisics_params[3][3],
			double distotion[4]);

	 /**
  	 * Parse calibration values
  	 *
  	 * @param Cv3dTrackerCameraIntrinsics *in
  	 * @param double matrix_intrinsic[3][3]
  	 * @param double distortion[4]
  	 *
  	 * @return void
  	 *
  	 */
	void parseCalibartionValues(Cv3dTrackerCameraIntrinsics *in,
			double matrix_intrinsic[3][3], double distortion[4]);
	

};

#endif //CYBOPTICALTRACKER_H

#endif /*CYBSTEREO_H_*/
